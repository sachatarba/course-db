// Code generated by mockery v2.43.0. DO NOT EDIT.

package mocks

import (
	context "context"

	entity "github.com/sachatarba/course-db/internal/entity"
	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// IClientService is an autogenerated mock type for the IClientService type
type IClientService struct {
	mock.Mock
}

// ChangeClient provides a mock function with given fields: ctx, client
func (_m *IClientService) ChangeClient(ctx context.Context, client entity.Client) error {
	ret := _m.Called(ctx, client)

	if len(ret) == 0 {
		panic("no return value specified for ChangeClient")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, entity.Client) error); ok {
		r0 = rf(ctx, client)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteClient provides a mock function with given fields: ctx, clientID
func (_m *IClientService) DeleteClient(ctx context.Context, clientID uuid.UUID) error {
	ret := _m.Called(ctx, clientID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteClient")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) error); ok {
		r0 = rf(ctx, clientID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetClientByID provides a mock function with given fields: ctx, clientID
func (_m *IClientService) GetClientByID(ctx context.Context, clientID uuid.UUID) (entity.Client, error) {
	ret := _m.Called(ctx, clientID)

	if len(ret) == 0 {
		panic("no return value specified for GetClientByID")
	}

	var r0 entity.Client
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (entity.Client, error)); ok {
		return rf(ctx, clientID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) entity.Client); ok {
		r0 = rf(ctx, clientID)
	} else {
		r0 = ret.Get(0).(entity.Client)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, clientID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetClientByLogin provides a mock function with given fields: ctx, login
func (_m *IClientService) GetClientByLogin(ctx context.Context, login string) (entity.Client, error) {
	ret := _m.Called(ctx, login)

	if len(ret) == 0 {
		panic("no return value specified for GetClientByLogin")
	}

	var r0 entity.Client
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (entity.Client, error)); ok {
		return rf(ctx, login)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) entity.Client); ok {
		r0 = rf(ctx, login)
	} else {
		r0 = ret.Get(0).(entity.Client)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, login)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListClients provides a mock function with given fields: ctx
func (_m *IClientService) ListClients(ctx context.Context) ([]entity.Client, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for ListClients")
	}

	var r0 []entity.Client
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]entity.Client, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []entity.Client); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.Client)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RegisterNewClient provides a mock function with given fields: ctx, client
func (_m *IClientService) RegisterNewClient(ctx context.Context, client entity.Client) error {
	ret := _m.Called(ctx, client)

	if len(ret) == 0 {
		panic("no return value specified for RegisterNewClient")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, entity.Client) error); ok {
		r0 = rf(ctx, client)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewIClientService creates a new instance of IClientService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIClientService(t interface {
	mock.TestingT
	Cleanup(func())
}) *IClientService {
	mock := &IClientService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
